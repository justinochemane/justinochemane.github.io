
lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ ls
inex.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        inex.html

nothing added to commit but untracked files present (use "git add" to track)

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git add index.html
fatal: pathspec 'index.html' did not match any files

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        index.html

nothing added to commit but untracked files present (use "git add" to track)

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git add index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   index.html


lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git add --all

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   README.md
        new file:   bluestyle.css
        new file:   index.html


lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git commit -m "First release of Hello World!"
[master (root-commit) 4d8c01e] First release of Hello World!
 3 files changed, 31 insertions(+)
 create mode 100644 README.md
 create mode 100644 bluestyle.css
 create mode 100644 index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status --short
 M index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git commit -a -m "Updated index with a new line"
[master 2ab948a] Updated index with a new line
 1 file changed, 1 insertion(+)

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git log
commit 2ab948aa8c44628d365c1b476e65b18aba393c93 (HEAD -> master)
Author: justino.chemane <justinocarloschemane@gmail.com>
Date:   Fri Nov 24 22:00:56 2023 +0200

    Updated index with a new line

commit 4d8c01e52f7ba803205fc830440ca40355b48aac
Author: justino.chemane <justinocarloschemane@gmail.com>
Date:   Fri Nov 24 21:56:10 2023 +0200

    First release of Hello World!

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status --short

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git commit -help
usage: git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|r
eword):]<commit>)]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
                  [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]
                  [--] [<pathspec>...]

    -q, --quiet           suppress summary after successful commit
    -v, --verbose         show diff in commit message template

Commit message options
    -F, --file <file>     read message from file
    --author <author>     override author for commit
    --date <date>         override date for commit
    -m, --message <message>
                          commit message
    -c, --reedit-message <commit>
                          reuse and edit message from specified commit
    -C, --reuse-message <commit>
                          reuse message from specified commit
    --fixup [(amend|reword):]commit
                          use autosquash formatted message to fixup or amend/rew
ord specified commit
    --squash <commit>     use autosquash formatted message to squash specified c
ommit
    --reset-author        the commit is authored by me now (used with -C/-c/--am
end)
    --trailer <trailer>   add custom trailer(s)
    -s, --signoff         add a Signed-off-by trailer
    -t, --template <file>
                          use specified template file
    -e, --edit            force edit of commit
    --cleanup <mode>      how to strip spaces and #comments from message
    --status              include status in commit message template
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit

Commit contents options
    -a, --all             commit all changed files
    -i, --include         add specified files to index for commit
    --interactive         interactively add files
    -p, --patch           interactively add changes
    -o, --only            commit only specified files
    -n, --no-verify       bypass pre-commit and commit-msg hooks
    --dry-run             show what would be committed
    --short               show status concisely
    --branch              show branch information
    --ahead-behind        compute full ahead/behind values
    --porcelain           machine-readable output
    --long                show status in long format (default)
    -z, --null            terminate entries with NUL
    --amend               amend previous commit
    --no-post-rewrite     bypass post-rewrite hook
    -u, --untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no.
 (Default: all)
    --pathspec-from-file <file>
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separ
ated with NUL character


lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status --help

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status -help
usage: git status [<options>] [--] [<pathspec>...]

    -v, --verbose         be verbose
    -s, --short           show status concisely
    -b, --branch          show branch information
    --show-stash          show stash information
    --ahead-behind        compute full ahead/behind values
    --porcelain[=<version>]
                          machine-readable output
    --long                show status in long format (default)
    -z, --null            terminate entries with NUL
    -u, --untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no.
 (Default: all)
    --ignored[=<mode>]    show ignored files, optional modes: traditional, match
ing, no. (Default: traditional)
    --ignore-submodules[=<when>]
                          ignore changes to submodules, optional when: all, dirt
y, untracked. (Default: all)
    --column[=<style>]    list untracked files in columns
    --no-renames          do not detect renames
    -M, --find-renames[=<n>]
                          detect renames, optionally set similarity index


lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch hello-world-images

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch
  hello-world-images
* master

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git checkout hello-world-images
Switched to branch 'hello-world-images'

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git status
On branch hello-world-images
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        img_hello_world.jpeg

no changes added to commit (use "git add" and/or "git commit -a")

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git add --all

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git status
On branch hello-world-images
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   img_hello_world.jpeg
        modified:   index.html


lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git commit -m "Added image to Hello World"
[hello-world-images 33c1a82] Added image to Hello World
 2 files changed, 3 insertions(+)
 create mode 100644 img_hello_world.jpeg

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ ls
README.md  bluestyle.css  img_hello_world.jpeg  index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git checkout master
Switched to branch 'master'

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ ls
README.md  bluestyle.css  index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git checkout -b emergency-fix
Switched to a new branch 'emergency-fix'

lelin@DESKTOP-774640B MINGW64 ~/myproject (emergency-fix)
$ git status
On branch emergency-fix
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")

lelin@DESKTOP-774640B MINGW64 ~/myproject (emergency-fix)
$ git add index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (emergency-fix)
$ git commit -m "updated index.html with emergency fix"
[emergency-fix 48b3757] updated index.html with emergency fix
 1 file changed, 1 insertion(+), 1 deletion(-)

lelin@DESKTOP-774640B MINGW64 ~/myproject (emergency-fix)
$ git status
On branch emergency-fix
nothing to commit, working tree clean

lelin@DESKTOP-774640B MINGW64 ~/myproject (emergency-fix)
$ git checkout master
Switched to branch 'master'

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git merge emergency-fix
Updating 2ab948a..48b3757
Fast-forward
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ ls
README.md  bluestyle.css  index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch -d emergency-fix
Deleted branch emergency-fix (was 48b3757).

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch
  hello-world-images
* master

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch hello-world-images
fatal: a branch named 'hello-world-images' already exists

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git checkout hello-world-images
Switched to branch 'hello-world-images'

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git branch
* hello-world-images
  master

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ ls
README.md  bluestyle.css  img_hello_world.jpeg  index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git status
On branch hello-world-images
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        img_hello_git.jpg

no changes added to commit (use "git add" and/or "git commit -a")

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git status
On branch hello-world-images
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        deleted:    img_hello_world.jpeg
        modified:   index.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        img_hello_git.jpg
        img_hello_world.jpg

no changes added to commit (use "git add" and/or "git commit -a")

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git add -all
error: did you mean `--all` (with two dashes)?

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git add --all

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git status
On branch hello-world-images
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   img_hello_git.jpg
        renamed:    img_hello_world.jpeg -> img_hello_world.jpg
        modified:   index.html


lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git commit -m "added new image and renamed the extension of the first picture"
[hello-world-images a985f78] added new image and renamed the extension of the fi
rst picture
 3 files changed, 4 insertions(+), 1 deletion(-)
 create mode 100644 img_hello_git.jpg
 rename img_hello_world.jpeg => img_hello_world.jpg (100%)

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git status
On branch hello-world-images
nothing to commit, working tree clean

lelin@DESKTOP-774640B MINGW64 ~/myproject (hello-world-images)
$ git checkout master
Switched to branch 'master'

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git merge hello-world-images
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

lelin@DESKTOP-774640B MINGW64 ~/myproject (master|MERGING)
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Changes to be committed:
        new file:   img_hello_git.jpg
        new file:   img_hello_world.jpg

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   index.html


lelin@DESKTOP-774640B MINGW64 ~/myproject (master|MERGING)
$ git add index.html

lelin@DESKTOP-774640B MINGW64 ~/myproject (master|MERGING)
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:
        new file:   img_hello_git.jpg
        new file:   img_hello_world.jpg
        modified:   index.html


lelin@DESKTOP-774640B MINGW64 ~/myproject (master|MERGING)
$ git commit -m "merged with hello-world-images after fixing conflicts"
[master b4449a8] merged with hello-world-images after fixing conflicts

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master
nothing to commit, working tree clean

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch -d hello-world-images
Deleted branch hello-world-images (was a985f78).

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git branch
* master

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git status
On branch master
nothing to commit, working tree clean

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git remote add origin https://github.com/justinochemane/hello-world.git

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$ git push --set-upstream origin master
info: please complete authentication in your browser...
Enumerating objects: 22, done.
Counting objects: 100% (22/22), done.
Delta compression using up to 4 threads
Compressing objects: 100% (22/22), done.
Writing objects: 100% (22/22), 46.19 KiB | 1.71 MiB/s, done.
Total 22 (delta 11), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (11/11), done.
To https://github.com/justinochemane/hello-world.git
 * [new branch]      master -> master
branch 'master' set up to track 'origin/master'.

lelin@DESKTOP-774640B MINGW64 ~/myproject (master)
$
